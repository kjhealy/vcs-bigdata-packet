[
  {
    "objectID": "slides/vcs-bigdata-01.html#workshop-materials",
    "href": "slides/vcs-bigdata-01.html#workshop-materials",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Workshop materials",
    "text": "Workshop materials\n\nWorkshop materials (and more besides) are available at https://github.com/kjhealy/vcs-bigdata-packet\nYou can get a zip file of everything at https://github.com/kjhealy/vcs-bigdata-packet/archive/refs/heads/main.zip\nOr clone the repository if you are familiar with git."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#load-some-packages",
    "href": "slides/vcs-bigdata-01.html#load-some-packages",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Load some packages",
    "text": "Load some packages\n\nlibrary(here)         # manage file paths\nlibrary(socviz)       # data and some useful functions\nlibrary(tidyverse)    # your friend and mine\nlibrary(broom)        # tidy model summaries\nlibrary(scales)       # scale fns\nlibrary(colorspace)   # palettes and scales\nlibrary(gapminder)    # inescapable\nlibrary(covdata)      # some data on covid\nlibrary(demog)        # us demographic data\nlibrary(nycflights13) # 2013 LGA flights"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#pig-data",
    "href": "slides/vcs-bigdata-01.html#pig-data",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Pig Data",
    "text": "Pig Data\n\n\n\n\n\nBenny’s dilemma."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#pig-data-1",
    "href": "slides/vcs-bigdata-01.html#pig-data-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Pig Data",
    "text": "Pig Data\n\n\n\n\n\nBenny has a brother now. He wanted one. And then he got one."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets",
    "href": "slides/vcs-bigdata-01.html#some-datasets",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n\npalmerpenguins::penguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nN = 344"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-1",
    "href": "slides/vcs-bigdata-01.html#some-datasets-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n\ngapminder::gapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nN = 1,704"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-2",
    "href": "slides/vcs-bigdata-01.html#some-datasets-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n\nsocviz::gss_lon\n\n# A tibble: 62,466 × 25\n    year    id ballot age   degree race  sex   siblings kids  bigregion income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labe&gt; &lt;lab&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;    &lt;fct&gt; &lt;fct&gt;     &lt;fct&gt;   \n 1  1972     1 NA     23    Bache… White Fema… 3        0     Midwest   &lt;NA&gt;    \n 2  1972     2 NA     70    Lt Hi… White Male  4        4+    Midwest   &lt;NA&gt;    \n 3  1972     3 NA     48    High … White Fema… 5        4+    Midwest   &lt;NA&gt;    \n 4  1972     4 NA     27    Bache… White Fema… 5        0     Midwest   &lt;NA&gt;    \n 5  1972     5 NA     61    High … White Fema… 2        2     Midwest   &lt;NA&gt;    \n 6  1972     6 NA     26    High … White Male  1        0     Midwest   &lt;NA&gt;    \n 7  1972     7 NA     28    High … White Male  6+       2     Midwest   &lt;NA&gt;    \n 8  1972     8 NA     27    Bache… White Male  1        0     Midwest   &lt;NA&gt;    \n 9  1972     9 NA     21    High … Black Fema… 2        2     South     &lt;NA&gt;    \n10  1972    10 NA     30    High … Black Fema… 6+       4+    South     &lt;NA&gt;    \n# ℹ 62,456 more rows\n# ℹ 14 more variables: religion &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners_rc &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;\n\n\nN = 62,466"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-3",
    "href": "slides/vcs-bigdata-01.html#some-datasets-3",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n\nnycflights13::flights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nN = 336,766"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-4",
    "href": "slides/vcs-bigdata-01.html#some-datasets-4",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n\ncovdata::stmf\n\n# A tibble: 580,395 × 17\n   country_code cname    iso2  continent iso3   year  week sex   split split_sex\n   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 2 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 3 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 4 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 5 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 6 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 7 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 8 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 9 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n10 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n# ℹ 580,385 more rows\n# ℹ 7 more variables: forecast &lt;dbl&gt;, approx_date &lt;date&gt;, age_group &lt;chr&gt;,\n#   death_count &lt;dbl&gt;, death_rate &lt;dbl&gt;, deaths_total &lt;dbl&gt;, rate_total &lt;dbl&gt;\n\n\nN = 580,395"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-5",
    "href": "slides/vcs-bigdata-01.html#some-datasets-5",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n\ncovdata::apple_mobility\n\n# A tibble: 2,254,515 × 7\n   country sub_region subregion_and_city geo_type date       transportation_type\n   &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;              &lt;chr&gt;    &lt;date&gt;     &lt;chr&gt;              \n 1 Albania Total      Total              country… 2020-01-13 driving            \n 2 Albania Total      Total              country… 2020-01-14 driving            \n 3 Albania Total      Total              country… 2020-01-15 driving            \n 4 Albania Total      Total              country… 2020-01-16 driving            \n 5 Albania Total      Total              country… 2020-01-17 driving            \n 6 Albania Total      Total              country… 2020-01-18 driving            \n 7 Albania Total      Total              country… 2020-01-19 driving            \n 8 Albania Total      Total              country… 2020-01-20 driving            \n 9 Albania Total      Total              country… 2020-01-21 driving            \n10 Albania Total      Total              country… 2020-01-22 driving            \n# ℹ 2,254,505 more rows\n# ℹ 1 more variable: score &lt;dbl&gt;\n\n\nN = 2,254,515"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-6",
    "href": "slides/vcs-bigdata-01.html#some-datasets-6",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\napple_health_all\n\n# A tibble: 7,808,311 × 10\n   rowid type       sourceName sourceVersion device unit  creationDate startDate\n   &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;    \n 1     1 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 2     2 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 3     3 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 4     4 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 5     5 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 6     6 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 7     7 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 8     8 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n 9     9 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n10    10 HKQuantit… Withings   6050301       &lt;&lt;HKD… count 2024-08-31 … 2024-05-…\n# ℹ 7,808,301 more rows\n# ℹ 2 more variables: endDate &lt;chr&gt;, value &lt;chr&gt;\n\nN = 7,808,311. Entirely about me. On my phone."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#some-datasets-7",
    "href": "slides/vcs-bigdata-01.html#some-datasets-7",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Some Datasets",
    "text": "Some Datasets\n## Arcos opioids data\ndf_db &lt;- tbl(con, \"arcos\")\n## How many rows?\ndf_db |&gt; count() \n\n#&gt; # Source:   SQL [1 x 1]\n#&gt; # Database: DuckDB v1.1.1 [root@Darwin 24.0.0:R 4.4.1//Users/kjhealy/Documents/data/arcos_opioids_test/db/arcos.duckdb]\n#&gt;           n\n#&gt;       &lt;dbl&gt;\n#&gt; 1 178598026\n\nN = 178,598,026\nThis is the only one that’s even remotely “big” right now—i.e. that needs a database if I want to interact with it properly. Truly big data won’t fit on your laptop."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#pig-data-2",
    "href": "slides/vcs-bigdata-01.html#pig-data-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Pig Data",
    "text": "Pig Data\n\n\n\n\n\nBenny’s brother screams and screams."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#big-data-1",
    "href": "slides/vcs-bigdata-01.html#big-data-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "‘Big’ Data",
    "text": "‘Big’ Data\n\n\nMore of everything\n\nMore observations\nMore patterns\nMore possibilities\nMore mess\nMore cleaning\nMore decisions\nMore problems\n\n\nBut we stay the same\n\nSame perception\nSame cognitive limits\nSame graphs we know how to understand\nSame number of things we can reasonably pay attention to\nSame tendency to spin yarns when we see a pattern"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#alpha-channel",
    "href": "slides/vcs-bigdata-01.html#alpha-channel",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Alpha Channel",
    "text": "Alpha Channel\n\ngapminder |&gt; \n  ggplot(aes(x = gdpPercap, \n             y = lifeExp)) + \n  geom_point() + \n  scale_x_log10()"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#alpha-channel-1",
    "href": "slides/vcs-bigdata-01.html#alpha-channel-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Alpha Channel",
    "text": "Alpha Channel\n\ngapminder |&gt; \n  ggplot(aes(x = gdpPercap, \n             y = lifeExp)) + \n  geom_point(alpha = 0.3) + \n  scale_x_log10()"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#or-cleveland-style",
    "href": "slides/vcs-bigdata-01.html#or-cleveland-style",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Or Cleveland-style",
    "text": "Or Cleveland-style\n\ngapminder |&gt; \n  ggplot(aes(x = gdpPercap, \n             y = lifeExp)) + \n  geom_point(shape = 1) + \n  scale_x_log10()"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#limits",
    "href": "slides/vcs-bigdata-01.html#limits",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Limits",
    "text": "Limits\n\nflights |&gt; \n  ggplot(aes(x = sched_dep_time, \n             y = dep_delay)) + \n  geom_point(shape = 1)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#hexbins",
    "href": "slides/vcs-bigdata-01.html#hexbins",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Hexbins?",
    "text": "Hexbins?\n\n\nflights |&gt; \n  ggplot(aes(x = sched_dep_time, \n             y = dep_delay)) + \n  geom_hex() + \n  scale_fill_binned_sequential(palette = \"Reds2\") + \n  theme(legend.text = element_text(size = rel(0.5)))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#hexbins-1",
    "href": "slides/vcs-bigdata-01.html#hexbins-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Hexbins?",
    "text": "Hexbins?\n\n\ndiamonds |&gt; \n  ggplot(aes(x = carat, \n             y = price)) + \n  geom_hex() + \n  scale_fill_binned_sequential(palette = \"Reds2\") + \n  theme(legend.text = element_text(size = rel(0.5)))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#hexbins-2",
    "href": "slides/vcs-bigdata-01.html#hexbins-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Hexbins?",
    "text": "Hexbins?\n\n\ndiamonds |&gt; \n  ggplot(aes(x = carat, \n             y = price)) + \n  geom_hex() + \n  scale_fill_binned_sequential(palette = \"Plasma\") + \n  theme(legend.text = element_text(size = rel(0.5)))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#hexbins-3",
    "href": "slides/vcs-bigdata-01.html#hexbins-3",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Hexbins?",
    "text": "Hexbins?\n\n\ndiamonds |&gt; \n  ggplot(aes(x = carat, \n             y = price)) + \n  geom_hex() + \n  scale_fill_binned_sequential(palette = \"Plasma\") + \n  facet_wrap(~ cut, ncol = 2, nrow = 3) +\n  theme(legend.text = element_text(size = rel(0.5)))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#simpler",
    "href": "slides/vcs-bigdata-01.html#simpler",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Simpler",
    "text": "Simpler\n\ndiamonds |&gt; \n  ggplot(aes(x = carat, y = price, fill = cut)) + \n  geom_point(shape = 1, alpha = 0.3)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer\n\n\n\n\n# A tibble: 1,644 × 12\n    year month n_days births total_pop births_pct births_pct_day date      \n   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt; &lt;date&gt;    \n 1  1938     1     31  51820  41215000    0.00126           40.6 1938-01-01\n 2  1938     2     28  47421  41215000    0.00115           41.1 1938-02-01\n 3  1938     3     31  54887  41215000    0.00133           43.0 1938-03-01\n 4  1938     4     30  54623  41215000    0.00133           44.2 1938-04-01\n 5  1938     5     31  56853  41215000    0.00138           44.5 1938-05-01\n 6  1938     6     30  53145  41215000    0.00129           43.0 1938-06-01\n 7  1938     7     31  53214  41215000    0.00129           41.6 1938-07-01\n 8  1938     8     31  50444  41215000    0.00122           39.5 1938-08-01\n 9  1938     9     30  50545  41215000    0.00123           40.9 1938-09-01\n10  1938    10     31  50079  41215000    0.00122           39.2 1938-10-01\n# ℹ 1,634 more rows\n# ℹ 4 more variables: seasonal &lt;dbl&gt;, trend &lt;dbl&gt;, remainder &lt;dbl&gt;,\n#   country &lt;chr&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-1",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\")\n\n\n\n\n# A tibble: 996 × 12\n    year month n_days births total_pop births_pct births_pct_day date      \n   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt; &lt;date&gt;    \n 1  1933     1     31 180545 125579000    0.00144           46.4 1933-01-01\n 2  1933     2     28 165986 125579000    0.00132           47.2 1933-02-01\n 3  1933     3     31 183762 125579000    0.00146           47.2 1933-03-01\n 4  1933     4     30 171354 125579000    0.00136           45.5 1933-04-01\n 5  1933     5     31 174811 125579000    0.00139           44.9 1933-05-01\n 6  1933     6     30 169255 125579000    0.00135           44.9 1933-06-01\n 7  1933     7     31 180880 125579000    0.00144           46.5 1933-07-01\n 8  1933     8     31 181856 125579000    0.00145           46.7 1933-08-01\n 9  1933     9     30 167637 125579000    0.00133           44.5 1933-09-01\n10  1933    10     31 167055 125579000    0.00133           42.9 1933-10-01\n# ℹ 986 more rows\n# ℹ 4 more variables: seasonal &lt;dbl&gt;, trend &lt;dbl&gt;, remainder &lt;dbl&gt;,\n#   country &lt;chr&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-2",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE))\n\n\n\n\n# A tibble: 996 × 14\n    year month n_days births total_pop births_pct births_pct_day date      \n   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt; &lt;date&gt;    \n 1  1933     1     31 180545 125579000    0.00144           46.4 1933-01-01\n 2  1933     2     28 165986 125579000    0.00132           47.2 1933-02-01\n 3  1933     3     31 183762 125579000    0.00146           47.2 1933-03-01\n 4  1933     4     30 171354 125579000    0.00136           45.5 1933-04-01\n 5  1933     5     31 174811 125579000    0.00139           44.9 1933-05-01\n 6  1933     6     30 169255 125579000    0.00135           44.9 1933-06-01\n 7  1933     7     31 180880 125579000    0.00144           46.5 1933-07-01\n 8  1933     8     31 181856 125579000    0.00145           46.7 1933-08-01\n 9  1933     9     30 167637 125579000    0.00133           44.5 1933-09-01\n10  1933    10     31 167055 125579000    0.00133           42.9 1933-10-01\n# ℹ 986 more rows\n# ℹ 6 more variables: seasonal &lt;dbl&gt;, trend &lt;dbl&gt;, remainder &lt;dbl&gt;,\n#   country &lt;chr&gt;, year_fct &lt;ord&gt;, month_fct &lt;ord&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-3",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-3",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything())\n\n\n\n\n# A tibble: 996 × 14\n    year month year_fct month_fct n_days births total_pop births_pct\n   &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt;    &lt;ord&gt;      &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1  1933     1 1933     Jan           31 180545 125579000    0.00144\n 2  1933     2 1933     Feb           28 165986 125579000    0.00132\n 3  1933     3 1933     Mar           31 183762 125579000    0.00146\n 4  1933     4 1933     Apr           30 171354 125579000    0.00136\n 5  1933     5 1933     May           31 174811 125579000    0.00139\n 6  1933     6 1933     Jun           30 169255 125579000    0.00135\n 7  1933     7 1933     Jul           31 180880 125579000    0.00144\n 8  1933     8 1933     Aug           31 181856 125579000    0.00145\n 9  1933     9 1933     Sep           30 167637 125579000    0.00133\n10  1933    10 1933     Oct           31 167055 125579000    0.00133\n# ℹ 986 more rows\n# ℹ 6 more variables: births_pct_day &lt;dbl&gt;, date &lt;date&gt;, seasonal &lt;dbl&gt;,\n#   trend &lt;dbl&gt;, remainder &lt;dbl&gt;, country &lt;chr&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-4",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-4",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-5",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-5",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-6",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-6",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-7",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-7",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-8",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-8",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\") +\n  labs(x = NULL, y = NULL,\n       title = \"Monthly Birth Rates\",\n       fill = \"Average births per million people per day\",\n         caption = \"Data: US Census Bureau.\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-9",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-9",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\") +\n  labs(x = NULL, y = NULL,\n       title = \"Monthly Birth Rates\",\n       fill = \"Average births per million people per day\",\n         caption = \"Data: US Census Bureau.\") +\n  coord_fixed()"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-10",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-10",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\") +\n  labs(x = NULL, y = NULL,\n       title = \"Monthly Birth Rates\",\n       fill = \"Average births per million people per day\",\n         caption = \"Data: US Census Bureau.\") +\n  coord_fixed() +\n  guides(fill = guide_legend(keywidth = 3,\n                    label.position = \"bottom\"))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-11",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-11",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\") +\n  labs(x = NULL, y = NULL,\n       title = \"Monthly Birth Rates\",\n       fill = \"Average births per million people per day\",\n         caption = \"Data: US Census Bureau.\") +\n  coord_fixed() +\n  guides(fill = guide_legend(keywidth = 3,\n                    label.position = \"bottom\")) +\n  theme(legend.position = \"bottom\",\n        legend.title.position = \"right\",\n        legend.justification = \"left\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-12",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-12",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\") +\n  labs(x = NULL, y = NULL,\n       title = \"Monthly Birth Rates\",\n       fill = \"Average births per million people per day\",\n         caption = \"Data: US Census Bureau.\") +\n  coord_fixed() +\n  guides(fill = guide_legend(keywidth = 3,\n                    label.position = \"bottom\")) +\n  theme(legend.position = \"bottom\",\n        legend.title.position = \"right\",\n        legend.justification = \"left\") -&gt;\n  p_tileboom"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-13",
    "href": "slides/vcs-bigdata-01.html#binning-and-tiling-can-work-13",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Binning and Tiling Can Work",
    "text": "Binning and Tiling Can Work\n\n\n\nokboomer |&gt;\n  filter(country == \"United States\") |&gt;\n    mutate(year_fct =\n             factor(year,\n                    levels = unique(year),\n                    ordered = TRUE),\n           month_fct = factor(month,\n                              levels = rev(c(1:12)),\n                              labels = rev(c(\"Jan\", \"Feb\",\n                                  \"Mar\", \"Apr\", \"May\",\n                                  \"Jun\", \"Jul\", \"Aug\",\n                                  \"Sep\", \"Oct\", \"Nov\", \"Dec\")),\n                              ordered = TRUE)) |&gt;\n    select(year, month, year_fct, month_fct, everything()) |&gt;\n    ggplot(aes(x = year_fct, y = month_fct)) +\n    geom_tile(mapping = aes(fill = births_pct_day),\n              color = \"white\") +\n   scale_x_discrete(breaks = seq(1940, 2010, 5)) +\n   scale_fill_viridis_c(option = \"B\") +\n  labs(x = NULL, y = NULL,\n       title = \"Monthly Birth Rates\",\n       fill = \"Average births per million people per day\",\n         caption = \"Data: US Census Bureau.\") +\n  coord_fixed() +\n  guides(fill = guide_legend(keywidth = 3,\n                    label.position = \"bottom\")) +\n  theme(legend.position = \"bottom\",\n        legend.title.position = \"right\",\n        legend.justification = \"left\") -&gt;\n  p_tileboom"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#distributions",
    "href": "slides/vcs-bigdata-01.html#distributions",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Distributions",
    "text": "Distributions\n\npalmerpenguins::penguins |&gt; \n  ggplot(aes(x = bill_length_mm, fill = species)) + \n  geom_histogram() + facet_wrap(~ species) + guides(fill = \"none\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#the-humble-histogram-cares-not",
    "href": "slides/vcs-bigdata-01.html#the-humble-histogram-cares-not",
    "title": "‘Big’ Data with R and ggplot",
    "section": "The humble histogram cares not",
    "text": "The humble histogram cares not\n\napple_mobility |&gt; \n  mutate(score = squish(score, range = c(0, 500))) |&gt; \n  ggplot(aes(x = score, fill = transportation_type)) + \n  geom_histogram(bins = 60) + facet_wrap(~ transportation_type) + \n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) + \n  guides(fill = \"none\") \n\n\n(2.5M rows.)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#big-data-often-means-long-tails",
    "href": "slides/vcs-bigdata-01.html#big-data-often-means-long-tails",
    "title": "‘Big’ Data with R and ggplot",
    "section": "‘Big’ Data often means Long Tails",
    "text": "‘Big’ Data often means Long Tails\n\nflights |&gt; \n  left_join(airlines, by = \"carrier\") |&gt; \n  mutate(sname = str_squish(str_extract(name, \"^.*? \"))) |&gt; \n  filter(sname %in% c(\"United\", \"JetBlue\", \"ExpressJet\", \"Delta\", \n                      \"Delta\", \"American\", \"Envoy\", \"US\", \"Endeavor\", \n                      \"Southwest\")) |&gt; \n  ggplot(aes(x = dep_delay, y = sname)) + \n  geom_boxplot() + \n  labs(y = NULL)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#big-data-can-mean-long-tails",
    "href": "slides/vcs-bigdata-01.html#big-data-can-mean-long-tails",
    "title": "‘Big’ Data with R and ggplot",
    "section": "‘Big’ Data can mean Long Tails",
    "text": "‘Big’ Data can mean Long Tails\n\nflights |&gt; \n  left_join(airlines, by = \"carrier\") |&gt; \n  mutate(sname = str_squish(str_extract(name, \"^.*? \"))) |&gt; \n  filter(sname %in% c(\"United\", \"JetBlue\", \"ExpressJet\", \"Delta\", \n                      \"Delta\", \"American\", \"Envoy\", \"US\", \"Endeavor\", \n                      \"Southwest\")) |&gt; \n  ggplot(aes(x = dep_delay, y = sname)) + \n  geom_violin() + \n  labs(y = NULL)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#big-data-can-mean-long-tails-1",
    "href": "slides/vcs-bigdata-01.html#big-data-can-mean-long-tails-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "‘Big’ Data can mean Long Tails",
    "text": "‘Big’ Data can mean Long Tails\n\nflights |&gt; \n  left_join(airlines, by = \"carrier\") |&gt; \n  mutate(sname = str_squish(str_extract(name, \"^.*? \"))) |&gt; \n  filter(sname %in% c(\"United\", \"JetBlue\", \"ExpressJet\", \"Delta\", \n                      \"Delta\", \"American\", \"Envoy\", \"US\", \"Endeavor\", \n                      \"Southwest\")) |&gt; \n  mutate(dep_delay_sq = squish(dep_delay, range = c(0, 120))) |&gt; \n  ggplot(aes(x = dep_delay_sq, y = sname)) + \n  ggdist::stat_slab(density = \"histogram\", fill = \"black\") + labs(y = NULL)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#big-data-can-mean-long-tails-2",
    "href": "slides/vcs-bigdata-01.html#big-data-can-mean-long-tails-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "‘Big’ Data can mean Long Tails",
    "text": "‘Big’ Data can mean Long Tails\n\ndiamonds |&gt; \n  ggplot(aes(y = cut, x = price, fill = cut)) + \n  ggdist::stat_slabinterval() +\n  scale_fill_discrete_qualitative(palette = \"Dark2\") + \n  guides(fill = \"none\") + labs(y = NULL)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#weak-associations",
    "href": "slides/vcs-bigdata-01.html#weak-associations",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Weak Associations",
    "text": "Weak Associations\n\ndf\n\n# A tibble: 50,000 × 2\n       x     y\n   &lt;dbl&gt; &lt;dbl&gt;\n 1  55.9  34.6\n 2  41.4  61.1\n 3  65.1  45.7\n 4  50.4  45.3\n 5  64.5  70.3\n 6  55.8  81.7\n 7  36.1  19.0\n 8  27.8  81.2\n 9  47.6  55.1\n10  21.2  30.8\n# ℹ 49,990 more rows\n\ncor(df$x, df$y)\n\n[1] 0.2006598\n\n\nBy design, x and y are weakly correlated."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#scatterplot",
    "href": "slides/vcs-bigdata-01.html#scatterplot",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Scatterplot",
    "text": "Scatterplot\n\ndf |&gt; \n  ggplot(aes(x = x, y = y)) + \n  geom_point(shape = 1, alpha = 0.3) + \n  geom_smooth(se = FALSE, method = \"lm\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#you-might-be-tempted",
    "href": "slides/vcs-bigdata-01.html#you-might-be-tempted",
    "title": "‘Big’ Data with R and ggplot",
    "section": "You might be tempted",
    "text": "You might be tempted\n\nDiscretizing or binning a continuous variable in order to get a bit of leverage over a second variable is a thing people do, but generally should not.\nE.g., split x into deciles, then take the mean of y within each x decile.\n\n\ndeciles &lt;- seq(0, 1, 0.1)\n\ndf &lt;- df |&gt;\n  mutate(x_c = cut(x, quantile(x, deciles))) |&gt; \n  group_by(x_c) |&gt; \n  summarize(y_mean = mean(y)) |&gt; \n  drop_na() \n\ndf\n\n# A tibble: 10 × 2\n   x_c          y_mean\n   &lt;fct&gt;         &lt;dbl&gt;\n 1 (-17.5,25.9]   37.8\n 2 (25.9,32.4]    40.7\n 3 (32.4,37.2]    42.3\n 4 (37.2,41.2]    43.3\n 5 (41.2,45.1]    44.4\n 6 (45.1,48.9]    45.8\n 7 (48.9,53]      46.7\n 8 (53,57.7]      47.4\n 9 (57.7,64.3]    49.1\n10 (64.3,107]     51.9"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#number-go-up",
    "href": "slides/vcs-bigdata-01.html#number-go-up",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Number go up",
    "text": "Number go up\n\ndf |&gt; \n  ggplot(aes(x = x_c, y = y_mean)) + \n  geom_point(size = rel(3)) + \n  labs(title = \"Do not do this.\", x = \"Deciles of x\", y = \"Mean y within Decile\") + \n  theme(axis.text.x = element_text(size = rel(0.75)))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#again-same-issues",
    "href": "slides/vcs-bigdata-01.html#again-same-issues",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Again, Same Issues",
    "text": "Again, Same Issues\n\n\npalmerpenguins, gapminder, okboomer, diamonds, nycflights, and arcos differ by multiple orders of magnitude.\n\n\n\n\nBut the same visualization issues tend to arise whether your data has 5,000 observations or 50 million."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#covid-symptoms",
    "href": "slides/vcs-bigdata-01.html#covid-symptoms",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Covid Symptoms",
    "text": "Covid Symptoms\n\nThis data is not big, but it’s hard to represent!"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#covid-symptoms-1",
    "href": "slides/vcs-bigdata-01.html#covid-symptoms-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Covid Symptoms",
    "text": "Covid Symptoms\n\ncovid_df &lt;- read_csv(here(\"examples\", \"covid-symptoms.csv\"))\n\nsymptoms &lt;- c(\"Anosmia\", \"Cough\", \"Fatigue\", \n              \"Diarrhea\", \"Breath\", \"Fever\")\nnames(symptoms) &lt;- symptoms\nsymptoms\n\n   Anosmia      Cough    Fatigue   Diarrhea     Breath      Fever \n \"Anosmia\"    \"Cough\"  \"Fatigue\" \"Diarrhea\"   \"Breath\"    \"Fever\" \n\ncovid_df\n\n# A tibble: 1,764 × 7\n   subset  Anosmia Cough Fatigue Diarrhea Breath Fever\n   &lt;chr&gt;   &lt;lgl&gt;   &lt;lgl&gt; &lt;lgl&gt;   &lt;lgl&gt;    &lt;lgl&gt;  &lt;lgl&gt;\n 1 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 2 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 3 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 4 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 5 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 6 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 7 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 8 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 9 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n10 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n# ℹ 1,754 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#covid-symptoms-2",
    "href": "slides/vcs-bigdata-01.html#covid-symptoms-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Covid Symptoms",
    "text": "Covid Symptoms\n\n# remotes::install_github(\"krassowski/complex-upset\")\n\nlibrary(ComplexUpset)\n\nupset(data = covid_df, intersect = symptoms, \n      name=\"Symptom Groupings by Frequency. Total pool is 1,764 individuals.\", \n      min_size = 0,\n      width_ratio = 0.125) +\n    labs(title = \"Co-Occurence of COVID-19 Symptoms\",\n         caption = \"Data: covid.joinzoe.com/us | Graph: @kjhealy\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#covid-symptoms-3",
    "href": "slides/vcs-bigdata-01.html#covid-symptoms-3",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Covid Symptoms",
    "text": "Covid Symptoms"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#other-cases",
    "href": "slides/vcs-bigdata-01.html#other-cases",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Other cases",
    "text": "Other cases\n\nstmf\n\n# A tibble: 580,395 × 17\n   country_code cname    iso2  continent iso3   year  week sex   split split_sex\n   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 2 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 3 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 4 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 5 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 6 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 7 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 8 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 9 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n10 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n# ℹ 580,385 more rows\n# ℹ 7 more variables: forecast &lt;dbl&gt;, approx_date &lt;date&gt;, age_group &lt;chr&gt;,\n#   death_count &lt;dbl&gt;, death_rate &lt;dbl&gt;, deaths_total &lt;dbl&gt;, rate_total &lt;dbl&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#what-were-interested-in",
    "href": "slides/vcs-bigdata-01.html#what-were-interested-in",
    "title": "‘Big’ Data with R and ggplot",
    "section": "What we’re interested in",
    "text": "What we’re interested in\n\nstmf |&gt;\n  filter(sex == \"b\", year &gt; 2014 & year &lt; 2020) |&gt; \n  select(cname, iso3, year:sex, age_group, death_rate, rate_total)\n\n# A tibble: 49,310 × 8\n   cname     iso3   year  week sex   age_group death_rate rate_total\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia AUS    2015     1 b     0-14        0.000360    0.00639\n 2 Australia AUS    2015     1 b     15-64       0.00184     0.00639\n 3 Australia AUS    2015     1 b     65-74       0.0112      0.00639\n 4 Australia AUS    2015     1 b     75-84       0.0378      0.00639\n 5 Australia AUS    2015     1 b     85+         0.127       0.00639\n 6 Australia AUS    2015     2 b     0-14        0.000334    0.00605\n 7 Australia AUS    2015     2 b     15-64       0.00172     0.00605\n 8 Australia AUS    2015     2 b     65-74       0.0108      0.00605\n 9 Australia AUS    2015     2 b     75-84       0.0341      0.00605\n10 Australia AUS    2015     2 b     85+         0.124       0.00605\n# ℹ 49,300 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#mortality-rankings-mean-and-max",
    "href": "slides/vcs-bigdata-01.html#mortality-rankings-mean-and-max",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Mortality rankings: mean and max",
    "text": "Mortality rankings: mean and max\n\nrate_rank &lt;- stmf |&gt;\n  filter(sex == \"b\", year &gt; 2014 & year &lt; 2020) |&gt;\n  group_by(country_code) |&gt;\n  summarize(mean_rate = mean(rate_total, na.rm = TRUE)) |&gt;\n  mutate(rate_rank = rank(mean_rate))\n\n\nrate_max_rank &lt;- stmf |&gt;\n  filter(sex == \"b\", year == 2020) |&gt;\n  group_by(country_code) |&gt;\n  summarize(covid_max = max(rate_total, na.rm = TRUE)) |&gt;\n  mutate(covid_max_rank = rank(covid_max))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#mortality-rankings-mean-and-max-1",
    "href": "slides/vcs-bigdata-01.html#mortality-rankings-mean-and-max-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Mortality rankings: mean and max",
    "text": "Mortality rankings: mean and max\n\n\nrate_rank\n\n# A tibble: 38 × 3\n   country_code mean_rate rate_rank\n   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1 AUS            0.00653         5\n 2 AUT            0.00923        19\n 3 BEL            0.00960        21\n 4 BGR            0.0153         38\n 5 CAN            0.00750         9\n 6 CHE            0.00790        11\n 7 CHL            0.00604         3\n 8 CZE            0.0104         26\n 9 DEUTNP         0.0113         30\n10 DNK            0.00928        20\n# ℹ 28 more rows\n\n\n\nrate_max_rank\n\n# A tibble: 38 × 3\n   country_code covid_max covid_max_rank\n   &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n 1 AUS            0.00707              3\n 2 AUT            0.0149              18\n 3 BEL            0.0193              26\n 4 BGR            0.0356              38\n 5 CAN            0.00950              8\n 6 CHE            0.0133              15\n 7 CHL            0.0116              12\n 8 CZE            0.0206              31\n 9 DEUTNP         0.0160              22\n10 DNK            0.0114              11\n# ℹ 28 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#select-the-columns-merge-the-ranks",
    "href": "slides/vcs-bigdata-01.html#select-the-columns-merge-the-ranks",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Select the columns; merge the ranks",
    "text": "Select the columns; merge the ranks\n\n\ndf &lt;- stmf |&gt;\n  filter(sex == \"b\", year &gt; 2014, year &lt; 2021,\n         country_code %in% c(\"AUT\", \"BEL\", \"CHE\", \"DEUTNP\", \"DNK\", \"ESP\", \"FIN\", \"FRATNP\", \"GBR_SCO\", \"GBRTENW\",\n                             \"GRC\", \"HUN\", \"ITA\", \"LUX\", \"POL\", \"NLD\", \"NOR\", \"PRT\", \"SWE\", \"USA\")) |&gt;\n  filter(!(year == 2020 & week &gt; 53)) |&gt;\n  group_by(cname, year, week) |&gt;\n  mutate(yr_ind = year %in% 2020) |&gt;\n  slice(1) |&gt;\n  left_join(rate_rank, by = \"country_code\") |&gt;\n  left_join(rate_max_rank, by = \"country_code\")\n\ndf\n\n# A tibble: 6,279 × 22\n# Groups:   cname, year, week [6,279]\n   country_code cname   iso2  continent iso3   year  week sex   split split_sex\n   &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 AUT          Austria AT    Europe    AUT    2015     1 b         0         0\n 2 AUT          Austria AT    Europe    AUT    2015     2 b         0         0\n 3 AUT          Austria AT    Europe    AUT    2015     3 b         0         0\n 4 AUT          Austria AT    Europe    AUT    2015     4 b         0         0\n 5 AUT          Austria AT    Europe    AUT    2015     5 b         0         0\n 6 AUT          Austria AT    Europe    AUT    2015     6 b         0         0\n 7 AUT          Austria AT    Europe    AUT    2015     7 b         0         0\n 8 AUT          Austria AT    Europe    AUT    2015     8 b         0         0\n 9 AUT          Austria AT    Europe    AUT    2015     9 b         0         0\n10 AUT          Austria AT    Europe    AUT    2015    10 b         0         0\n# ℹ 6,269 more rows\n# ℹ 12 more variables: forecast &lt;dbl&gt;, approx_date &lt;date&gt;, age_group &lt;chr&gt;,\n#   death_count &lt;dbl&gt;, death_rate &lt;dbl&gt;, deaths_total &lt;dbl&gt;, rate_total &lt;dbl&gt;,\n#   yr_ind &lt;lgl&gt;, mean_rate &lt;dbl&gt;, rate_rank &lt;dbl&gt;, covid_max &lt;dbl&gt;,\n#   covid_max_rank &lt;dbl&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf\n\n\n\n\n# A tibble: 6,279 × 22\n# Groups:   cname, year, week [6,279]\n   country_code cname   iso2  continent iso3   year  week sex   split split_sex\n   &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 AUT          Austria AT    Europe    AUT    2015     1 b         0         0\n 2 AUT          Austria AT    Europe    AUT    2015     2 b         0         0\n 3 AUT          Austria AT    Europe    AUT    2015     3 b         0         0\n 4 AUT          Austria AT    Europe    AUT    2015     4 b         0         0\n 5 AUT          Austria AT    Europe    AUT    2015     5 b         0         0\n 6 AUT          Austria AT    Europe    AUT    2015     6 b         0         0\n 7 AUT          Austria AT    Europe    AUT    2015     7 b         0         0\n 8 AUT          Austria AT    Europe    AUT    2015     8 b         0         0\n 9 AUT          Austria AT    Europe    AUT    2015     9 b         0         0\n10 AUT          Austria AT    Europe    AUT    2015    10 b         0         0\n# ℹ 6,269 more rows\n# ℹ 12 more variables: forecast &lt;dbl&gt;, approx_date &lt;date&gt;, age_group &lt;chr&gt;,\n#   death_count &lt;dbl&gt;, death_rate &lt;dbl&gt;, deaths_total &lt;dbl&gt;, rate_total &lt;dbl&gt;,\n#   yr_ind &lt;lgl&gt;, mean_rate &lt;dbl&gt;, rate_rank &lt;dbl&gt;, covid_max &lt;dbl&gt;,\n#   covid_max_rank &lt;dbl&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot-1",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf |&gt;\n  ggplot(aes(x = week,\n             y = rate_total,\n             color = yr_ind,\n             group = year))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot-2",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf |&gt;\n  ggplot(aes(x = week,\n             y = rate_total,\n             color = yr_ind,\n             group = year)) +\n  scale_color_manual(values = c(\"gray70\", \"firebrick\"),\n                     labels = c(\"2015-2019\", \"2020\"))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot-3",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot-3",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf |&gt;\n  ggplot(aes(x = week,\n             y = rate_total,\n             color = yr_ind,\n             group = year)) +\n  scale_color_manual(values = c(\"gray70\", \"firebrick\"),\n                     labels = c(\"2015-2019\", \"2020\")) +\n  scale_x_continuous(limits = c(1, 52),\n                     breaks = c(1, seq(10, 50, 10)),\n                     labels = as.character(c(1, seq(10, 50, 10))))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot-4",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot-4",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf |&gt;\n  ggplot(aes(x = week,\n             y = rate_total,\n             color = yr_ind,\n             group = year)) +\n  scale_color_manual(values = c(\"gray70\", \"firebrick\"),\n                     labels = c(\"2015-2019\", \"2020\")) +\n  scale_x_continuous(limits = c(1, 52),\n                     breaks = c(1, seq(10, 50, 10)),\n                     labels = as.character(c(1, seq(10, 50, 10)))) +\n  geom_line(linewidth = 0.9)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot-5",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot-5",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf |&gt;\n  ggplot(aes(x = week,\n             y = rate_total,\n             color = yr_ind,\n             group = year)) +\n  scale_color_manual(values = c(\"gray70\", \"firebrick\"),\n                     labels = c(\"2015-2019\", \"2020\")) +\n  scale_x_continuous(limits = c(1, 52),\n                     breaks = c(1, seq(10, 50, 10)),\n                     labels = as.character(c(1, seq(10, 50, 10)))) +\n  geom_line(linewidth = 0.9) +\n  facet_wrap(~ reorder(cname, rate_rank, na.rm = TRUE), ncol = 5)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#and-make-the-plot-6",
    "href": "slides/vcs-bigdata-01.html#and-make-the-plot-6",
    "title": "‘Big’ Data with R and ggplot",
    "section": "And make the plot",
    "text": "And make the plot\n\n\n\ndf |&gt;\n  ggplot(aes(x = week,\n             y = rate_total,\n             color = yr_ind,\n             group = year)) +\n  scale_color_manual(values = c(\"gray70\", \"firebrick\"),\n                     labels = c(\"2015-2019\", \"2020\")) +\n  scale_x_continuous(limits = c(1, 52),\n                     breaks = c(1, seq(10, 50, 10)),\n                     labels = as.character(c(1, seq(10, 50, 10)))) +\n  geom_line(linewidth = 0.9) +\n  facet_wrap(~ reorder(cname, rate_rank, na.rm = TRUE), ncol = 5) +  \n  labs(x = \"Week of the Year\", y = \"Total Death Rate\",\n       color = \"Year\", title = \"Overall Weekly Death Rates\",\n       caption = \"Graph: @kjhealy. Data: Human Mortality Database, mortality.org\") -&gt; p_stmf\n\n\n\n\n\ndf |&gt; \n  ggplot(aes(x = week, \n             y = rate_total, \n             color = yr_ind, \n             group = year)) +\n  scale_color_manual(values = c(\"gray70\", \"firebrick\"), \n                     labels = c(\"2015-2019\", \"2020\")) +\n  scale_x_continuous(limits = c(1, 52),\n                     breaks = c(1, seq(10, 50, 10)),\n                     labels = as.character(c(1, seq(10, 50, 10)))) +\n  geom_line(linewidth = 0.9) +\n  facet_wrap(~ reorder(cname, rate_rank, na.rm = TRUE), ncol = 5) + \n  labs(x = \"Week of the Year\", y = \"Total Death Rate\",\n       color = \"Year\", title = \"Overall Weekly Death Rates\",\n       caption = \"Graph: @kjhealy. Data: Human Mortality Database, mortality.org\") -&gt; p_stmf"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#split-apply-combine",
    "href": "slides/vcs-bigdata-01.html#split-apply-combine",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Split, Apply, Combine",
    "text": "Split, Apply, Combine\ndplyr is about splitting or grouping your data, doing something to it by applying a function, and then reassembling the result into a new table. The new table either has the same number of rows as the old one (if it’s a mutate() operation adding columns), or the same number of rows as there were groups (if it’s a summarize() operation).\n\ngss_sm\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#split-apply-combine-1",
    "href": "slides/vcs-bigdata-01.html#split-apply-combine-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Split, Apply, Combine",
    "text": "Split, Apply, Combine\n\ngss_sm |&gt; \n  group_by(bigregion) |&gt; \n  tally()\n\n# A tibble: 4 × 2\n  bigregion     n\n  &lt;fct&gt;     &lt;int&gt;\n1 Northeast   488\n2 Midwest     695\n3 South      1052\n4 West        632"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#split-apply-combine-2",
    "href": "slides/vcs-bigdata-01.html#split-apply-combine-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Split, Apply, Combine",
    "text": "Split, Apply, Combine\nThis pattern can get more complex, generally when the thing we are doing to the groups gets more complex, or we do it to more groups.\n\ngss_sm |&gt; \n  group_by(race, sex, degree) |&gt; \n  summarize(mean_kids = mean(childs, na.rm = TRUE), \n            median_age = median(age, na.rm = TRUE))\n\n# A tibble: 34 × 5\n# Groups:   race, sex [6]\n   race  sex    degree         mean_kids median_age\n   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;              &lt;dbl&gt;      &lt;dbl&gt;\n 1 White Male   Lt High School      2.45       54  \n 2 White Male   High School         1.61       50  \n 3 White Male   Junior College      1.54       51  \n 4 White Male   Bachelor            1.35       47  \n 5 White Male   Graduate            1.71       54  \n 6 White Female Lt High School      2.81       54  \n 7 White Female High School         1.98       53  \n 8 White Female Junior College      1.91       47  \n 9 White Female Bachelor            1.44       51  \n10 White Female Graduate            1.38       55.5\n# ℹ 24 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nlm(lifeExp ~ log(gdpPercap), data = gapminder) |&gt; \n  summary()\n\n\nCall:\nlm(formula = lifeExp ~ log(gdpPercap), data = gapminder)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-32.778  -4.204   1.212   4.658  19.285 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     -9.1009     1.2277  -7.413 1.93e-13 ***\nlog(gdpPercap)   8.4051     0.1488  56.500  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.62 on 1702 degrees of freedom\nMultiple R-squared:  0.6522,    Adjusted R-squared:  0.652 \nF-statistic:  3192 on 1 and 1702 DF,  p-value: &lt; 2.2e-16\n\n\nWe can’t do anything with this, programmatically."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-1",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nlm(lifeExp ~ log(gdpPercap), data = gapminder) |&gt; \n  broom::tidy()\n\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)       -9.10     1.23      -7.41 1.93e-13\n2 log(gdpPercap)     8.41     0.149     56.5  0       \n\n\nMuch nicer. This is just a tibble. We know about those."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-2",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nImagine we want to fit this model on a subset of the gapminder data: European countries in 1977.\n\neu77 &lt;- gapminder |&gt; filter(continent == \"Europe\", year == 1977)\n\neu77\n\n# A tibble: 30 × 6\n   country                continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;                  &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Albania                Europe     1977    68.9  2509048     3533.\n 2 Austria                Europe     1977    72.2  7568430    19749.\n 3 Belgium                Europe     1977    72.8  9821800    19118.\n 4 Bosnia and Herzegovina Europe     1977    69.9  4086000     3528.\n 5 Bulgaria               Europe     1977    70.8  8797022     7612.\n 6 Croatia                Europe     1977    70.6  4318673    11305.\n 7 Czech Republic         Europe     1977    70.7 10161915    14800.\n 8 Denmark                Europe     1977    74.7  5088419    20423.\n 9 Finland                Europe     1977    72.5  4738902    15605.\n10 France                 Europe     1977    73.8 53165019    18293.\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-3",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-3",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nfit &lt;- lm(lifeExp ~ log(gdpPercap), data = eu77)\n\ntidy(fit)\n\n# A tibble: 2 × 5\n  term           estimate std.error statistic    p.value\n  &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 (Intercept)       29.5      7.16       4.12 0.000306  \n2 log(gdpPercap)     4.49     0.756      5.94 0.00000217\n\n\nWhat if we want to do this for all combinations of continent/year?"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-4",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-4",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nfit &lt;- lm(lifeExp ~ log(gdpPercap), data = eu77)\n\ntidy(fit)\n\n# A tibble: 2 × 5\n  term           estimate std.error statistic    p.value\n  &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 (Intercept)       29.5      7.16       4.12 0.000306  \n2 log(gdpPercap)     4.49     0.756      5.94 0.00000217\n\n\nWhat if we want to do this for all combinations of continent/year?\nSplit. Apply. Combine."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-5",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-5",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\ndf_nest &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest()\n\ndf_nest\n\n# A tibble: 60 × 3\n# Groups:   continent, year [60]\n   continent  year data             \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;           \n 1 Asia       1952 &lt;tibble [33 × 4]&gt;\n 2 Asia       1957 &lt;tibble [33 × 4]&gt;\n 3 Asia       1962 &lt;tibble [33 × 4]&gt;\n 4 Asia       1967 &lt;tibble [33 × 4]&gt;\n 5 Asia       1972 &lt;tibble [33 × 4]&gt;\n 6 Asia       1977 &lt;tibble [33 × 4]&gt;\n 7 Asia       1982 &lt;tibble [33 × 4]&gt;\n 8 Asia       1987 &lt;tibble [33 × 4]&gt;\n 9 Asia       1992 &lt;tibble [33 × 4]&gt;\n10 Asia       1997 &lt;tibble [33 × 4]&gt;\n# ℹ 50 more rows\n\n\nThink of nesting as a kind of “super-grouping”. Look in the object inspector."
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-6",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-6",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nIt’s still in there.\n\ndf_nest |&gt; filter(continent == \"Europe\" & year == 1977) |&gt; \n    unnest(cols = c(data))\n\n# A tibble: 30 × 6\n# Groups:   continent, year [1]\n   continent  year country                lifeExp      pop gdpPercap\n   &lt;fct&gt;     &lt;int&gt; &lt;fct&gt;                    &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Europe     1977 Albania                   68.9  2509048     3533.\n 2 Europe     1977 Austria                   72.2  7568430    19749.\n 3 Europe     1977 Belgium                   72.8  9821800    19118.\n 4 Europe     1977 Bosnia and Herzegovina    69.9  4086000     3528.\n 5 Europe     1977 Bulgaria                  70.8  8797022     7612.\n 6 Europe     1977 Croatia                   70.6  4318673    11305.\n 7 Europe     1977 Czech Republic            70.7 10161915    14800.\n 8 Europe     1977 Denmark                   74.7  5088419    20423.\n 9 Europe     1977 Finland                   72.5  4738902    15605.\n10 Europe     1977 France                    73.8 53165019    18293.\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-7",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-7",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nHere we apply or map() a custom function to every row in the data column.\n\nfit_ols &lt;- function(df) {\n    lm(lifeExp ~ log(gdpPercap), data = df)\n}\n\ndf_nest &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest() |&gt; \n    mutate(model = map(data, fit_ols))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-8",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-8",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\ndf_nest\n\n# A tibble: 60 × 4\n# Groups:   continent, year [60]\n   continent  year data              model \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;            &lt;list&gt;\n 1 Asia       1952 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 2 Asia       1957 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 3 Asia       1962 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 4 Asia       1967 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 5 Asia       1972 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 6 Asia       1977 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 7 Asia       1982 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 8 Asia       1987 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 9 Asia       1992 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n10 Asia       1997 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-9",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-9",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nWe can tidy the nested models, too.\n\nfit_ols &lt;- function(df) {\n    lm(lifeExp ~ log(gdpPercap), data = df)\n}\n\ndf_tidy &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest() |&gt; \n    mutate(model = map(data, fit_ols),\n           tidied = map(model, tidy)) |&gt;\n    unnest(cols = c(tidied)) |&gt;\n    filter(term %nin% \"(Intercept)\" &\n           continent %nin% \"Oceania\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-10",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-10",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\ndf_tidy\n\n# A tibble: 48 × 9\n# Groups:   continent, year [48]\n   continent  year data     model  term     estimate std.error statistic p.value\n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;   &lt;list&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Asia       1952 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.16     1.25       3.33 2.28e-3\n 2 Asia       1957 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.17     1.28       3.26 2.71e-3\n 3 Asia       1962 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.59     1.24       3.72 7.94e-4\n 4 Asia       1967 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.50     1.15       3.90 4.77e-4\n 5 Asia       1972 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.44     1.01       4.41 1.16e-4\n 6 Asia       1977 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.87     1.03       4.75 4.42e-5\n 7 Asia       1982 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.78     0.852      5.61 3.77e-6\n 8 Asia       1987 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     5.17     0.727      7.12 5.31e-8\n 9 Asia       1992 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     5.09     0.649      7.84 7.60e-9\n10 Asia       1997 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     5.11     0.628      8.15 3.35e-9\n# ℹ 38 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-11",
    "href": "slides/vcs-bigdata-01.html#grouped-analysis-and-list-columns-11",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\ndf_tidy |&gt; \n    ungroup() |&gt;\n    sample_n(5)\n\n# A tibble: 5 × 9\n  continent  year data     model  term      estimate std.error statistic p.value\n  &lt;fct&gt;     &lt;int&gt; &lt;list&gt;   &lt;list&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Africa     1977 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     4.51     0.920      4.90 1.04e-5\n2 Americas   1987 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     7.10     1.14       6.25 2.22e-6\n3 Africa     1992 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     7.33     1.10       6.64 2.22e-8\n4 Americas   1962 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…    10.4      2.27       4.57 1.35e-4\n5 Asia       1952 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     4.16     1.25       3.33 2.28e-3"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#nesting-other-things",
    "href": "slides/vcs-bigdata-01.html#nesting-other-things",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Nesting other things",
    "text": "Nesting other things\nLet’s go back to this stage:\n\n# New model\nfit_ols2 &lt;- function(df) {\n    lm(lifeExp ~ log(gdpPercap) + log(pop), data = df)\n}\n\ndf_tidy &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest() |&gt; \n    mutate(model = map(data, fit_ols2),\n           tidied = map(model, tidy)) \n\ndf_tidy\n\n# A tibble: 60 × 5\n# Groups:   continent, year [60]\n   continent  year data              model  tidied          \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;            &lt;list&gt; &lt;list&gt;          \n 1 Asia       1952 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 2 Asia       1957 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 3 Asia       1962 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 4 Asia       1967 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 5 Asia       1972 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 6 Asia       1977 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 7 Asia       1982 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 8 Asia       1987 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n 9 Asia       1992 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n10 Asia       1997 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [3 × 5]&gt;\n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#a-function-to-draw-a-coef-plot",
    "href": "slides/vcs-bigdata-01.html#a-function-to-draw-a-coef-plot",
    "title": "‘Big’ Data with R and ggplot",
    "section": "A function to draw a coef plot",
    "text": "A function to draw a coef plot\n\n# Plot the output from our model\nmod_plot &lt;- function(results, title){\n  results |&gt; \n    filter(term %nin% \"(Intercept)\") |&gt; \n    ggplot(mapping = aes(x = estimate,\n                         xmin = estimate - std.error,\n                         xmax = estimate + std.error,\n                         y = reorder(term, estimate))) + \n    geom_pointrange() + \n    labs(title = title, \n         y = NULL)\n}"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#use-it-in-a-single-case",
    "href": "slides/vcs-bigdata-01.html#use-it-in-a-single-case",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Use it in a single case",
    "text": "Use it in a single case\n\neu77_results &lt;- fit_ols2(eu77) |&gt; tidy()\n\neu77_results\n\n# A tibble: 3 × 5\n  term           estimate std.error statistic     p.value\n  &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 (Intercept)      38.2       7.90       4.83 0.0000477  \n2 log(gdpPercap)    4.56      0.714      6.39 0.000000754\n3 log(pop)         -0.589     0.278     -2.12 0.0433"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#use-it-in-a-single-case-1",
    "href": "slides/vcs-bigdata-01.html#use-it-in-a-single-case-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Use it in a single case",
    "text": "Use it in a single case\n\nmod_plot(results = eu77_results, title = \"The EU 77 Model\")"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#do-it-for-every-case",
    "href": "slides/vcs-bigdata-01.html#do-it-for-every-case",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Do it for every case",
    "text": "Do it for every case\nWe want to do exactly this just for the subset of data created by every combination of continent/year. Which is to say, every row of our nested data.\nWhen we have two arguments to feed a function we can use map2(). The general case is pmap(), for passing any number of arguments as a list. To apply the mod_plot() function to each row, we need to pass it the tidied model and the title of the plot.\n\ndf_tidy &lt;- gapminder |&gt; group_by(continent, year) |&gt; \n  nest() |&gt; \n  mutate(title = paste(continent, year),\n         model = map(data, fit_ols2),\n         tidied = map(model, tidy), \n         ggout = pmap(list(tidied, title), \n                      mod_plot))"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#do-it-for-every-case-1",
    "href": "slides/vcs-bigdata-01.html#do-it-for-every-case-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Do it for every case",
    "text": "Do it for every case\n\ndf_tidy\n\n# A tibble: 60 × 7\n# Groups:   continent, year [60]\n   continent  year data              title     model  tidied           ggout \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;            &lt;chr&gt;     &lt;list&gt; &lt;list&gt;           &lt;list&gt;\n 1 Asia       1952 &lt;tibble [33 × 4]&gt; Asia 1952 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 2 Asia       1957 &lt;tibble [33 × 4]&gt; Asia 1957 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 3 Asia       1962 &lt;tibble [33 × 4]&gt; Asia 1962 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 4 Asia       1967 &lt;tibble [33 × 4]&gt; Asia 1967 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 5 Asia       1972 &lt;tibble [33 × 4]&gt; Asia 1972 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 6 Asia       1977 &lt;tibble [33 × 4]&gt; Asia 1977 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 7 Asia       1982 &lt;tibble [33 × 4]&gt; Asia 1982 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 8 Asia       1987 &lt;tibble [33 × 4]&gt; Asia 1987 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n 9 Asia       1992 &lt;tibble [33 × 4]&gt; Asia 1992 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n10 Asia       1997 &lt;tibble [33 × 4]&gt; Asia 1997 &lt;lm&gt;   &lt;tibble [3 × 5]&gt; &lt;gg&gt;  \n# ℹ 50 more rows\n\n\nNow, every element of the ggout column in df_tidy is …"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#a-plot",
    "href": "slides/vcs-bigdata-01.html#a-plot",
    "title": "‘Big’ Data with R and ggplot",
    "section": "A plot!",
    "text": "A plot!\n\n\n\ndf_tidy$ggout[[8]]\n\n\n\n\n\n\n\n\n\n\ndf_tidy$ggout[[18]]"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#we-dont-just-put-them-in-there-for-fun",
    "href": "slides/vcs-bigdata-01.html#we-dont-just-put-them-in-there-for-fun",
    "title": "‘Big’ Data with R and ggplot",
    "section": "We don’t just put them in there for fun",
    "text": "We don’t just put them in there for fun\n\nWe can walk the plots out to disk"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#we-dont-just-put-them-in-there-for-fun-1",
    "href": "slides/vcs-bigdata-01.html#we-dont-just-put-them-in-there-for-fun-1",
    "title": "‘Big’ Data with R and ggplot",
    "section": "We don’t just put them in there for fun",
    "text": "We don’t just put them in there for fun\n\nWe can walk the plots out to disk\n\n\n# If a root-level figures directory doesn't exist, create one\nif(!dir.exists(here(\"figures\"))) dir.create(here(\"figures\"))\n\nfs::dir_ls(here(\"figures\"))\n\ncharacter(0)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#we-dont-just-put-them-in-there-for-fun-2",
    "href": "slides/vcs-bigdata-01.html#we-dont-just-put-them-in-there-for-fun-2",
    "title": "‘Big’ Data with R and ggplot",
    "section": "We don’t just put them in there for fun",
    "text": "We don’t just put them in there for fun\n\nWe can e.g. walk the plots out to disk\nwalk() is map() for when you just want a “side-effect” such as printed output. There is also walk2() and pwalk()\n\n\npwalk(\n  list(\n    filename = paste0(df_tidy$title, \".png\"),\n    plot = df_tidy$ggout,\n    path = here(\"figures\"),\n    height = 3, width = 4,\n    dpi = 300\n  ),\n  ggsave\n)"
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#peek-again-in-the-figures-folder",
    "href": "slides/vcs-bigdata-01.html#peek-again-in-the-figures-folder",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Peek again in the figures/ folder",
    "text": "Peek again in the figures/ folder\n\nfs::dir_ls(here(\"figures\")) |&gt; \n  basename()\n\n [1] \"Africa 1952.png\"   \"Africa 1957.png\"   \"Africa 1962.png\"  \n [4] \"Africa 1967.png\"   \"Africa 1972.png\"   \"Africa 1977.png\"  \n [7] \"Africa 1982.png\"   \"Africa 1987.png\"   \"Africa 1992.png\"  \n[10] \"Africa 1997.png\"   \"Africa 2002.png\"   \"Africa 2007.png\"  \n[13] \"Americas 1952.png\" \"Americas 1957.png\" \"Americas 1962.png\"\n[16] \"Americas 1967.png\" \"Americas 1972.png\" \"Americas 1977.png\"\n[19] \"Americas 1982.png\" \"Americas 1987.png\" \"Americas 1992.png\"\n[22] \"Americas 1997.png\" \"Americas 2002.png\" \"Americas 2007.png\"\n[25] \"Asia 1952.png\"     \"Asia 1957.png\"     \"Asia 1962.png\"    \n[28] \"Asia 1967.png\"     \"Asia 1972.png\"     \"Asia 1977.png\"    \n[31] \"Asia 1982.png\"     \"Asia 1987.png\"     \"Asia 1992.png\"    \n[34] \"Asia 1997.png\"     \"Asia 2002.png\"     \"Asia 2007.png\"    \n[37] \"Europe 1952.png\"   \"Europe 1957.png\"   \"Europe 1962.png\"  \n[40] \"Europe 1967.png\"   \"Europe 1972.png\"   \"Europe 1977.png\"  \n[43] \"Europe 1982.png\"   \"Europe 1987.png\"   \"Europe 1992.png\"  \n[46] \"Europe 1997.png\"   \"Europe 2002.png\"   \"Europe 2007.png\"  \n[49] \"Oceania 1952.png\"  \"Oceania 1957.png\"  \"Oceania 1962.png\" \n[52] \"Oceania 1967.png\"  \"Oceania 1972.png\"  \"Oceania 1977.png\" \n[55] \"Oceania 1982.png\"  \"Oceania 1987.png\"  \"Oceania 1992.png\" \n[58] \"Oceania 1997.png\"  \"Oceania 2002.png\"  \"Oceania 2007.png\""
  },
  {
    "objectID": "slides/vcs-bigdata-01.html#clean-up",
    "href": "slides/vcs-bigdata-01.html#clean-up",
    "title": "‘Big’ Data with R and ggplot",
    "section": "Clean up",
    "text": "Clean up\n\nfs::dir_delete(here(\"figures\"))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualizing Big Data with R and ggplot",
    "section": "",
    "text": "Click the links to see the slides.\n\nBig Data is just Data\nA Database and duckdb example"
  },
  {
    "objectID": "index.html#slides-for-the-workshop",
    "href": "index.html#slides-for-the-workshop",
    "title": "Visualizing Big Data with R and ggplot",
    "section": "",
    "text": "Click the links to see the slides.\n\nBig Data is just Data\nA Database and duckdb example"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#load-the-packages",
    "href": "slides/vcs-bigdata-02.html#load-the-packages",
    "title": "Databases and duckdb",
    "section": "Load the packages",
    "text": "Load the packages\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine\nlibrary(gapminder) # inescapable\n\nlibrary(DBI) # DBMS interface layer\nlibrary(duckdb) # Local database server"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#what-were-talking-about",
    "href": "slides/vcs-bigdata-02.html#what-were-talking-about",
    "title": "Databases and duckdb",
    "section": "What we’re talking about",
    "text": "What we’re talking about\nMostly in this case, datasets that are nominally larger than your laptop’s memory.\nThere are other more specific uses, and truly huge data is beyond the scope of the course. But we can look at methods for working with data that’s “big” for all practical purposes."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#databases",
    "href": "slides/vcs-bigdata-02.html#databases",
    "title": "Databases and duckdb",
    "section": "Databases",
    "text": "Databases\nWhen we’re working with data in the social sciences the basic case is a single table that we’re going to do something with, like run a regression or make a plot.\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nBut the bigger a dataset gets, the more we have to think about whether we really want (or even can have) all of it in memory all the time."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#databases-1",
    "href": "slides/vcs-bigdata-02.html#databases-1",
    "title": "Databases and duckdb",
    "section": "Databases",
    "text": "Databases\nIn addition, much of what we want to do with a specific dataset will involve actually acting on some relatively small subset of it.\n\ngapminder |&gt; \n  select(gdpPercap, lifeExp)\n\n# A tibble: 1,704 × 2\n   gdpPercap lifeExp\n       &lt;dbl&gt;   &lt;dbl&gt;\n 1      779.    28.8\n 2      821.    30.3\n 3      853.    32.0\n 4      836.    34.0\n 5      740.    36.1\n 6      786.    38.4\n 7      978.    39.9\n 8      852.    40.8\n 9      649.    41.7\n10      635.    41.8\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#databases-2",
    "href": "slides/vcs-bigdata-02.html#databases-2",
    "title": "Databases and duckdb",
    "section": "Databases",
    "text": "Databases\nIn addition, much of what we want to do with a specific dataset will involve actually acting on some relatively small subset of it.\n\ngapminder |&gt; \n  filter(continent == \"Europe\", \n         year == 1977)\n\n# A tibble: 30 × 6\n   country                continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;                  &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Albania                Europe     1977    68.9  2509048     3533.\n 2 Austria                Europe     1977    72.2  7568430    19749.\n 3 Belgium                Europe     1977    72.8  9821800    19118.\n 4 Bosnia and Herzegovina Europe     1977    69.9  4086000     3528.\n 5 Bulgaria               Europe     1977    70.8  8797022     7612.\n 6 Croatia                Europe     1977    70.6  4318673    11305.\n 7 Czech Republic         Europe     1977    70.7 10161915    14800.\n 8 Denmark                Europe     1977    74.7  5088419    20423.\n 9 Finland                Europe     1977    72.5  4738902    15605.\n10 France                 Europe     1977    73.8 53165019    18293.\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#databases-3",
    "href": "slides/vcs-bigdata-02.html#databases-3",
    "title": "Databases and duckdb",
    "section": "Databases",
    "text": "Databases\nIn addition, much of what we want to do with a specific dataset will involve actually acting on some relatively small subset of it.\n\ngapminder |&gt; \n  group_by(continent) |&gt; \n  summarize(lifeExp = mean(lifeExp), \n            pop = mean(pop), \n            gdpPercap = mean(gdpPercap))\n\n# A tibble: 5 × 4\n  continent lifeExp       pop gdpPercap\n  &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa       48.9  9916003.     2194.\n2 Americas     64.7 24504795.     7136.\n3 Asia         60.1 77038722.     7902.\n4 Europe       71.9 17169765.    14469.\n5 Oceania      74.3  8874672.    18622."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#databases-4",
    "href": "slides/vcs-bigdata-02.html#databases-4",
    "title": "Databases and duckdb",
    "section": "Databases",
    "text": "Databases\nEfficiently storing and querying really large quantities of data is the realm of the database and of Structured Query Languages.\nAs with everything in information technology there is a long and interesting story about various efforts to come up with a good theory of data storage and retrieval, and efficient algorithms for it. If you are interested, watch e.g. this lecture from a DBMS course from about twelve minutes in."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#wheres-the-database",
    "href": "slides/vcs-bigdata-02.html#wheres-the-database",
    "title": "Databases and duckdb",
    "section": "Where’s the database?",
    "text": "Where’s the database?\nLocal or remote?\nOn disk or in memory?\nThe important thing from the database admin’s point of view is that the data is stored efficiently, that we have a means of querying it, and those queries rely on some search-and-retrieval method that’s really fast.\nThere’s no free lunch. We want storage methods to be efficient and queries to be fast because the datasets are gonna be gigantic, and accessing them will take time."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-layouts",
    "href": "slides/vcs-bigdata-02.html#database-layouts",
    "title": "Databases and duckdb",
    "section": "Database layouts",
    "text": "Database layouts\nA real database is usually not a single giant table. Instead it is more like a list of tables that are partially connected through keys shared between tables. Those keys are indexed and the tables are stored in a tree-like way that makes searching much faster than just going down each row and looking for matches.\nFrom a social science perspective, putting things in different tables might be thought of a matter of logically organizing entities at different units of observation. Querying tables is a matter of assembling tables ad hoc at various units of analysis."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-layouts-1",
    "href": "slides/vcs-bigdata-02.html#database-layouts-1",
    "title": "Databases and duckdb",
    "section": "Database layouts",
    "text": "Database layouts\n\n\ngapminder_xtra &lt;- read_csv(here(\"examples\", \"gapminder_xtra.csv\"))\ngapminder_xtra\n\n# A tibble: 1,704 × 13\n   country     continent  year lifeExp      pop gdpPercap area_pct pop_pct\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.     29.8    59.4\n 2 Afghanistan Asia       1957    30.3  9240934      821.     29.8    59.4\n 3 Afghanistan Asia       1962    32.0 10267083      853.     29.8    59.4\n 4 Afghanistan Asia       1967    34.0 11537966      836.     29.8    59.4\n 5 Afghanistan Asia       1972    36.1 13079460      740.     29.8    59.4\n 6 Afghanistan Asia       1977    38.4 14880372      786.     29.8    59.4\n 7 Afghanistan Asia       1982    39.9 12881816      978.     29.8    59.4\n 8 Afghanistan Asia       1987    40.8 13867957      852.     29.8    59.4\n 9 Afghanistan Asia       1992    41.7 16317921      649.     29.8    59.4\n10 Afghanistan Asia       1997    41.8 22227415      635.     29.8    59.4\n# ℹ 1,694 more rows\n# ℹ 5 more variables: gm_countries &lt;dbl&gt;, country_fr &lt;chr&gt;, iso2 &lt;chr&gt;,\n#   iso3 &lt;chr&gt;, number &lt;dbl&gt;\n\n\n\nAgain, in social science terms, the redundancies are annoying in part because they apply to different levels or units of observation. From a Database point of view they are also bad because they allow the possibility of a variety of errors or anomalies when updating the table, and they make things really inefficient for search and querying."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-normalization",
    "href": "slides/vcs-bigdata-02.html#database-normalization",
    "title": "Databases and duckdb",
    "section": "Database normalization",
    "text": "Database normalization\nA hierarchical set of rules and criteria for ensuring the integrity of data stored across multiple tables and for reducing redundancy in data storage.\nTries to eliminate various sources of error — so-called Insertion, Update, and Deletion anomalies — particularly ones that will pollute, damage, or corrupt things beyond the specific change.\nRedundancy and error are minimized by breaking the database up into a series of linked or related tables. Hence the term “relational database”"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#normal-forms",
    "href": "slides/vcs-bigdata-02.html#normal-forms",
    "title": "Databases and duckdb",
    "section": "Normal Forms",
    "text": "Normal Forms\n0NF: No duplicate rows!\n1NF: Using row order to convey information is not allowed; Mixing data types in the same column is not allowed; No table without a primary key is not allowed. Primary keys can be defined by more than one column though.\n2NF: Each non-key attribute must depend on the entire primary key\n3NF: Every non-key attribute should depend wholly and only on the key.\nThink of these rules in connection with ideas about “tidy data”."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-normalization-1",
    "href": "slides/vcs-bigdata-02.html#database-normalization-1",
    "title": "Databases and duckdb",
    "section": "Database normalization",
    "text": "Database normalization\n\ngapminder_xtra\n\n# A tibble: 1,704 × 13\n   country     continent  year lifeExp      pop gdpPercap area_pct pop_pct\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.     29.8    59.4\n 2 Afghanistan Asia       1957    30.3  9240934      821.     29.8    59.4\n 3 Afghanistan Asia       1962    32.0 10267083      853.     29.8    59.4\n 4 Afghanistan Asia       1967    34.0 11537966      836.     29.8    59.4\n 5 Afghanistan Asia       1972    36.1 13079460      740.     29.8    59.4\n 6 Afghanistan Asia       1977    38.4 14880372      786.     29.8    59.4\n 7 Afghanistan Asia       1982    39.9 12881816      978.     29.8    59.4\n 8 Afghanistan Asia       1987    40.8 13867957      852.     29.8    59.4\n 9 Afghanistan Asia       1992    41.7 16317921      649.     29.8    59.4\n10 Afghanistan Asia       1997    41.8 22227415      635.     29.8    59.4\n# ℹ 1,694 more rows\n# ℹ 5 more variables: gm_countries &lt;dbl&gt;, country_fr &lt;chr&gt;, iso2 &lt;chr&gt;,\n#   iso3 &lt;chr&gt;, number &lt;dbl&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-normalization-2",
    "href": "slides/vcs-bigdata-02.html#database-normalization-2",
    "title": "Databases and duckdb",
    "section": "Database normalization",
    "text": "Database normalization\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-normalization-3",
    "href": "slides/vcs-bigdata-02.html#database-normalization-3",
    "title": "Databases and duckdb",
    "section": "Database normalization",
    "text": "Database normalization\n\n\ncontinent_tbl &lt;- read_tsv(here(\"examples\", \"continent_tab.tsv\")) \ncountry_tbl &lt;- read_tsv(here(\"examples\", \"country_tab.tsv\"))\nyear_tbl &lt;-  read_tsv(here(\"examples\", \"year_tab.tsv\"))  \n  \ncontinent_tbl\n\n# A tibble: 5 × 5\n  continent_id continent area_pct pop_pct gm_countries\n         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1            1 Africa        20.3    17.6           52\n2            2 Americas      28.1    13             25\n3            3 Asia          29.8    59.4           33\n4            4 Europe         6.7     9.4           30\n5            5 Oceania        5.7     0.6            2\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-normalization-4",
    "href": "slides/vcs-bigdata-02.html#database-normalization-4",
    "title": "Databases and duckdb",
    "section": "Database normalization",
    "text": "Database normalization\n\n\ncontinent_tbl\n\n# A tibble: 5 × 5\n  continent_id continent area_pct pop_pct gm_countries\n         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1            1 Africa        20.3    17.6           52\n2            2 Americas      28.1    13             25\n3            3 Asia          29.8    59.4           33\n4            4 Europe         6.7     9.4           30\n5            5 Oceania        5.7     0.6            2\n\ncountry_tbl\n\n# A tibble: 249 × 8\n   country_id continent_id country     iso_country country_fr iso2  iso3  number\n        &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1          1            3 Afghanistan Afghanistan Afghanist… AF    AFG        4\n 2          2            4 Albania     Albania     Albanie (… AL    ALB        8\n 3          3            1 Algeria     Algeria     Algérie (… DZ    DZA       12\n 4          4           NA &lt;NA&gt;        American S… Samoa amé… AS    ASM       16\n 5          5           NA &lt;NA&gt;        Andorra     Andorre (… AD    AND       20\n 6          6            1 Angola      Angola      Angola (l… AO    AGO       24\n 7          7           NA Anguilla    Anguilla    Anguilla   AI    AIA      660\n 8          8           NA Antarctica  Antarctica  Antarctiq… AQ    ATA       10\n 9          9           NA Antigua an… Antigua an… Antigua-e… AG    ATG       28\n10         10            2 Argentina   Argentina   Argentine… AR    ARG       32\n# ℹ 239 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#database-normalization-5",
    "href": "slides/vcs-bigdata-02.html#database-normalization-5",
    "title": "Databases and duckdb",
    "section": "Database normalization",
    "text": "Database normalization\n\n\ncountry_tbl\n\n# A tibble: 249 × 8\n   country_id continent_id country     iso_country country_fr iso2  iso3  number\n        &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1          1            3 Afghanistan Afghanistan Afghanist… AF    AFG        4\n 2          2            4 Albania     Albania     Albanie (… AL    ALB        8\n 3          3            1 Algeria     Algeria     Algérie (… DZ    DZA       12\n 4          4           NA &lt;NA&gt;        American S… Samoa amé… AS    ASM       16\n 5          5           NA &lt;NA&gt;        Andorra     Andorre (… AD    AND       20\n 6          6            1 Angola      Angola      Angola (l… AO    AGO       24\n 7          7           NA Anguilla    Anguilla    Anguilla   AI    AIA      660\n 8          8           NA Antarctica  Antarctica  Antarctiq… AQ    ATA       10\n 9          9           NA Antigua an… Antigua an… Antigua-e… AG    ATG       28\n10         10            2 Argentina   Argentina   Argentine… AR    ARG       32\n# ℹ 239 more rows\n\nyear_tbl\n\n# A tibble: 1,704 × 5\n    year country_id lifeExp      pop gdpPercap\n   &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1  1952          1    28.8  8425333      779.\n 2  1957          1    30.3  9240934      821.\n 3  1962          1    32.0 10267083      853.\n 4  1967          1    34.0 11537966      836.\n 5  1972          1    36.1 13079460      740.\n 6  1977          1    38.4 14880372      786.\n 7  1982          1    39.9 12881816      978.\n 8  1987          1    40.8 13867957      852.\n 9  1992          1    41.7 16317921      649.\n10  1997          1    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#the-main-idea",
    "href": "slides/vcs-bigdata-02.html#the-main-idea",
    "title": "Databases and duckdb",
    "section": "The main idea",
    "text": "The main idea\nUltimately, we query databases with SQL. There are several varieties, because there are a variety of database systems and each has their own wrinkles and quirks.\nWe try to abstract away from some of those quirk by using a DBI (DataBase Interface) layer, which is a generic set of commands for talking to some database. It’s analogous to an API.\nWe also need to use a package for the DBMS we’re talking to. It translates DBI instructions into the specific dialect the DBMS speaks."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#talking-to-databases-1",
    "href": "slides/vcs-bigdata-02.html#talking-to-databases-1",
    "title": "Databases and duckdb",
    "section": "Talking to databases",
    "text": "Talking to databases\nSome databases are small, and some are far away.\nClient-server databases are like websites, serving up responses to queries. The database lives on a machine somewhere in the building, or on campus or whatever.\nCloud DBMSs are like this, too, except the database lives on a machine in someone else’s building.\nIn-process DBMSs live and run on your laptop. We’ll use one of these, duckdb for examples here."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#talking-to-databases-2",
    "href": "slides/vcs-bigdata-02.html#talking-to-databases-2",
    "title": "Databases and duckdb",
    "section": "Talking to databases",
    "text": "Talking to databases\nWe need to open a connection to a database before talking to it. Conventionally this is called con.\nOnce connected, we ask it questions. Either we use functions or packages designed to translate our R / dplyr syntax into SQL, or we use functions to pass SQL queries on directly.\nWe try to minimize the amount of time we are actually making the database do a lot of work.\nThe key thing is that when working with databases our queries are lazy — they don’t actually do anything on the whole database unless its strictly necessary or they’re explicitly told to."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#the-nice-example",
    "href": "slides/vcs-bigdata-02.html#the-nice-example",
    "title": "Databases and duckdb",
    "section": "The nice example",
    "text": "The nice example\nWhere everything is lovely and clean."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#duckdb-and-dbi",
    "href": "slides/vcs-bigdata-02.html#duckdb-and-dbi",
    "title": "Databases and duckdb",
    "section": "duckdb and DBI",
    "text": "duckdb and DBI\n\n# library(DBI)\n\ncon &lt;- dbConnect(duckdb::duckdb(), path = \":memory:\")\n\nHere we open a connection to an in-memory duckdb database (rather than a file we will keep for later). It’s empty. We’re going to populate it with data from nycflights13."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#duckdb-and-dbi-1",
    "href": "slides/vcs-bigdata-02.html#duckdb-and-dbi-1",
    "title": "Databases and duckdb",
    "section": "duckdb and DBI",
    "text": "duckdb and DBI\n\ncopy_to(\n  dest = con, \n  df = nycflights13::flights, \n  name = \"flights\",\n  temporary = FALSE, \n  indexes = list(\n    c(\"year\", \"month\", \"day\"), \n    \"carrier\", \n    \"tailnum\",\n    \"dest\"\n    )\n  )\n\nRemember, keys and indexes are what make databases fast."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#make-a-lazy-tibble-from-it",
    "href": "slides/vcs-bigdata-02.html#make-a-lazy-tibble-from-it",
    "title": "Databases and duckdb",
    "section": "Make a lazy tibble from it",
    "text": "Make a lazy tibble from it\nThis says “go to con and get the ‘flights’ table in it, and pretend it’s a tibble called flights_db.\n\nflights_db &lt;- tbl(con, \"flights\")\n\nflights_db\n\n# Source:   table&lt;flights&gt; [?? x 19]\n# Database: DuckDB v1.1.3 [root@Darwin 24.3.0:R 4.4.3/:memory:]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#run-some-dplyr-like-queries",
    "href": "slides/vcs-bigdata-02.html#run-some-dplyr-like-queries",
    "title": "Databases and duckdb",
    "section": "Run some dplyr-like queries",
    "text": "Run some dplyr-like queries\n\nflights_db |&gt; select(year:day, dep_delay, arr_delay)\n\n# Source:   SQL [?? x 5]\n# Database: DuckDB v1.1.3 [root@Darwin 24.3.0:R 4.4.3/:memory:]\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#run-some-dplyr-like-queries-1",
    "href": "slides/vcs-bigdata-02.html#run-some-dplyr-like-queries-1",
    "title": "Databases and duckdb",
    "section": "Run some dplyr-like queries",
    "text": "Run some dplyr-like queries\n\nflights_db |&gt; filter(dep_delay &gt; 240) \n\n# Source:   SQL [?? x 19]\n# Database: DuckDB v1.1.3 [root@Darwin 24.3.0:R 4.4.3/:memory:]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1     1815           1325       290     2120           1542\n 3  2013     1     1     1842           1422       260     1958           1535\n 4  2013     1     1     2115           1700       255     2330           1920\n 5  2013     1     1     2205           1720       285       46           2040\n 6  2013     1     1     2343           1724       379      314           1938\n 7  2013     1     2     1332            904       268     1616           1128\n 8  2013     1     2     1412            838       334     1710           1147\n 9  2013     1     2     1607           1030       337     2003           1355\n10  2013     1     2     2131           1512       379     2340           1741\n# ℹ more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#run-some-dplyr-like-queries-2",
    "href": "slides/vcs-bigdata-02.html#run-some-dplyr-like-queries-2",
    "title": "Databases and duckdb",
    "section": "Run some dplyr-like queries",
    "text": "Run some dplyr-like queries\n\nflights_db |&gt;\n  group_by(dest) |&gt;\n  summarise(mean_dep_delay = mean(dep_delay))\n\n# Source:   SQL [?? x 2]\n# Database: DuckDB v1.1.3 [root@Darwin 24.3.0:R 4.4.3/:memory:]\n   dest  mean_dep_delay\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 SFO            12.9 \n 2 GSP            19.3 \n 3 SJU             9.81\n 4 GSO            19.4 \n 5 STT             4.61\n 6 SAN            11.1 \n 7 TYS            28.5 \n 8 EGE            15.5 \n 9 CRW            17   \n10 MTJ            17.6 \n# ℹ more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#lazy-lazy-lazy",
    "href": "slides/vcs-bigdata-02.html#lazy-lazy-lazy",
    "title": "Databases and duckdb",
    "section": "Lazy, lazy, lazy",
    "text": "Lazy, lazy, lazy\n\ntailnum_delay_db &lt;-  \n  flights_db |&gt; \n  group_by(tailnum) |&gt;\n  summarise(\n    mean_dep_delay = mean(dep_delay),\n    mean_arr_delay = mean(arr_delay),\n    n = n()) |&gt;\n  filter(n &gt; 100) |&gt; \n  arrange(desc(mean_arr_delay))\n\nThis doesn’t touch the database."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#lazy-lazy-lazy-1",
    "href": "slides/vcs-bigdata-02.html#lazy-lazy-lazy-1",
    "title": "Databases and duckdb",
    "section": "Lazy, lazy, lazy",
    "text": "Lazy, lazy, lazy\nEven when we ask to look at it, it just does the absolute minimum required.\n\ntailnum_delay_db\n\n# Source:     SQL [?? x 4]\n# Database:   DuckDB v1.1.3 [root@Darwin 24.3.0:R 4.4.3/:memory:]\n# Ordered by: desc(mean_arr_delay)\n   tailnum mean_dep_delay mean_arr_delay     n\n   &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;\n 1 N11119            32.6           30.3   148\n 2 N16919            32.4           29.9   251\n 3 N14998            29.4           27.9   230\n 4 N15910            29.3           27.6   280\n 5 N13123            29.6           26.0   121\n 6 N11192            27.5           25.9   154\n 7 N14950            26.2           25.3   219\n 8 N21130            27.0           25.0   126\n 9 N24128            24.8           24.9   129\n10 N22971            26.5           24.7   230\n# ℹ more rows"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#when-ready-use-collect",
    "href": "slides/vcs-bigdata-02.html#when-ready-use-collect",
    "title": "Databases and duckdb",
    "section": "When ready, use collect()",
    "text": "When ready, use collect()\n\ntailnum_delay &lt;- \n  tailnum_delay_db |&gt;  \n  collect()\n\ntailnum_delay\n\n# A tibble: 1,201 × 4\n   tailnum mean_dep_delay mean_arr_delay     n\n   &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;\n 1 N11119            32.6           30.3   148\n 2 N16919            32.4           29.9   251\n 3 N14998            29.4           27.9   230\n 4 N15910            29.3           27.6   280\n 5 N13123            29.6           26.0   121\n 6 N11192            27.5           25.9   154\n 7 N14950            26.2           25.3   219\n 8 N21130            27.0           25.0   126\n 9 N24128            24.8           24.9   129\n10 N22971            26.5           24.7   230\n# ℹ 1,191 more rows\n\n\nNow it exists for realsies."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#joins",
    "href": "slides/vcs-bigdata-02.html#joins",
    "title": "Databases and duckdb",
    "section": "Joins",
    "text": "Joins\nDatabase systems will have more than one table. We query and join them. The idea is that getting the DBMS to do this will be way faster and more memory-efficient than trying to get dplyr to do it."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#joins-1",
    "href": "slides/vcs-bigdata-02.html#joins-1",
    "title": "Databases and duckdb",
    "section": "Joins",
    "text": "Joins\n\n## Copy over the \"planes\" dataset to the same \"con\" DuckDB connection.\ncopy_to(\n    dest = con, \n    df = nycflights13::planes, \n    name = \"planes\",\n    temporary = FALSE, \n    indexes = \"tailnum\"\n    )\n\n## List tables in our \"con\" database connection (i.e. now \"flights\" and \"planes\")\ndbListTables(con)\n\n[1] \"flights\" \"planes\" \n\n## Reference from dplyr\nplanes_db &lt;-  tbl(con, 'planes')\n\nSee what we did there? It’s like con the database connection has a list of tables in it."
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#joins-2",
    "href": "slides/vcs-bigdata-02.html#joins-2",
    "title": "Databases and duckdb",
    "section": "Joins",
    "text": "Joins\n\n# Still not done for realsies!\nleft_join(\n    flights_db,\n    planes_db %&gt;% rename(year_built = year),\n    by = \"tailnum\" ## Important: Be specific about the joining column\n) |&gt; \n    select(year, month, day, dep_time, arr_time, carrier, flight, tailnum,\n           year_built, type, model) \n\n# Source:   SQL [?? x 11]\n# Database: DuckDB v1.1.3 [root@Darwin 24.3.0:R 4.4.3/:memory:]\n    year month   day dep_time arr_time carrier flight tailnum year_built type   \n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;  \n 1  2013     2    14     1045     1204 UA          67 N16713        1998 Fixed …\n 2  2013     2    14     1048     1412 B6         373 N659JB        2007 Fixed …\n 3  2013     2    14     1048     1333 UA         764 N665UA        1998 Fixed …\n 4  2013     2    14     1051     1203 US        2171 N747UW        2000 Fixed …\n 5  2013     2    14     1057     1244 WN         366 N414WN        2001 Fixed …\n 6  2013     2    14     1057     1353 UA        1550 N14228        1999 Fixed …\n 7  2013     2    14     1058     1211 EV        4694 N14993        2000 Fixed …\n 8  2013     2    14     1058     1337 DL        1647 N689DL        1998 Fixed …\n 9  2013     2    14     1105     1210 B6          24 N197JB        2006 Fixed …\n10  2013     2    14     1105     1302 MQ        4485 N711MQ        1976 Fixed …\n# ℹ more rows\n# ℹ 1 more variable: model &lt;chr&gt;"
  },
  {
    "objectID": "slides/vcs-bigdata-02.html#finishing-up",
    "href": "slides/vcs-bigdata-02.html#finishing-up",
    "title": "Databases and duckdb",
    "section": "Finishing up",
    "text": "Finishing up\nClose your connection!\n\ndbDisconnect(con)"
  }
]